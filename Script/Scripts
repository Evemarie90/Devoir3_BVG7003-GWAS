###############################################
# 1. INSTALLATION DES OUTILS ET DEPENDANCES  #
###############################################

# Installer R et RStudio
# - Télécharger et installer R depuis : https://cran.r-project.org/
# - Télécharger et installer RStudio Desktop depuis : https://posit.co/download/rstudio-desktop/

# Installer le paquet rMVP (pour l'analyse GWAS)
# - Exécutez le code suivant pour installer le package rMVP et ses dépendances
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("rMVP")

# Installer des packages supplémentaires nécessaires (ggplot2, data.table, dplyr, readxl)
install.packages(c("ggplot2", "data.table", "dplyr", "readxl"))

###############################################
# 2. CHARGEMENT DES BIBLIOTHEQUES            #
###############################################

library(readxl)  # Pour lire les fichiers Excel
library(rMVP)    # Pour l'analyse GWAS
library(dplyr)   # Pour le traitement des données

###############################################
# 3. PRETRAITEMENT DES DONNEES               #
###############################################

# 3.1 Chargement des donnees de genotype
# - Lecture d'un fichier Excel contenant les donnees de genotype
# - Assurez-vous que le fichier contient les colonnes "chrom", "pos", et "SNP" au minimum
excel_data <- read_excel("exported_dataset.xlsx")  # Charge les donnees de genotype depuis un fichier Excel

# 3.2 Formatage du fichier Hapmap
# - Convertir les positions ("pos") en entiers au cas où elles seraient lues en tant que texte
excel_data$pos <- as.integer(excel_data$pos)  # S'assure que la colonne 'pos' est de type entier

# 3.3 Sauvegarde du fichier au format Hapmap
# - Enregistre le fichier de donnees au format Hapmap requis par rMVP
write.table(excel_data, file = "output_file.hmp.txt", sep = "\t", row.names = FALSE, quote = FALSE)

###############################################
# 4. EXECUTION DE L'ANALYSE GWAS             #
###############################################

# 4.1 Preparation des fichiers de genotype et phenotype
# - Fichier de genotype (Hapmap) et phenotype (Phenotype_African.txt) sont fournis
# - rMVP les charge et genere les fichiers de genotype, phenotype et carte genetique
MVP.Data(fileHMP = "output_file.hmp.txt",  # Fichier Hapmap du genotype
         filePhe = "Phenotype_African.txt",  # Fichier de phénotype
         sep.hmp = "\t",  # Separateur de colonnes dans le fichier Hapmap
         sep.phe = "\t",  # Separateur de colonnes dans le fichier de phenotype
         SNP.effect = "Add",  # Modele additif d'effet des SNP
         fileKin = FALSE,  # Pas de fichier de matrice de parenté (peut être calculé plus tard)
         filePC = FALSE,  # Pas de fichier de composantes principales (sera calculé automatiquement)
         out = "mvp.hmp")  # Nom de la sortie (base de noms pour les fichiers generees)

# 4.2 Chargement des fichiers generes par MVP.Data
# - Charge les fichiers de genotype, phenotype et carte genetique
# - Les fichiers .desc, .phe et .map sont créés automatiquement

genotype <- attach.big.matrix("mvp.hmp.geno.desc")  # Charge la matrice de genotype
phenotype <- read.table("mvp.hmp.phe", header = TRUE)  # Charge le fichier de phénotype
map <- read.table("mvp.hmp.geno.map", header = TRUE)  # Charge la carte genetique

###############################################
# 5. EXECUTION DE L'ANALYSE GWAS AVEC rMVP  #
###############################################

# - Boucle sur chaque phenotype (colonne 2 à n de phenotype)
# - Applique 3 methodes GLM, MLM et FarmCPU

for(i in 2:ncol(phenotype)){
  imMVP <- MVP(
    phe = phenotype[, c(1, i)],  # Extraire la colonne du phenotype correspondant
    geno = genotype,  # Matrice de genotype
    map = map,  # Carte genetique
    nPC.GLM = 5,  # Inclure 5 composantes principales dans GLM
    nPC.MLM = 3,  # Inclure 3 composantes principales dans MLM
    nPC.FarmCPU = 3,  # Inclure 3 composantes principales dans FarmCPU
    maxLine = 10000,  # Nombre maximal de lignes traitees 
    vc.method = "BRENT",  # Methode d'estimation des composantes de variance
    method.bin = "static",  # Methode de binning pour FarmCPU
    threshold = 0.05,  # Seuil de significativite pour le GWAS
    method = c("GLM", "MLM", "FarmCPU"),  # Methodes d'analyse GWAS
    file.output = c("pmap", "pmap.signal", "plot", "log")  # Fichiers de sortie
  )
  gc()  # Nettoie la memoire a chaque iteration pour eviter l'accumulation de memoire
}

###############################################
# 6. GENERATION DE COVARIABLES (OPTIONNEL)   #
###############################################

# 6.1 Analyse en composantes principales (ACP) pour capturer la structure de la population
# - Cette etape peut être faite en R en utilisant prcomp() ou PCAtools
pca_results <- prcomp(genotype, scale. = TRUE)  # Effectue une ACP sur le genotype

# 6.2 Generer les covariables de l'ACP (par exemple, les 3 premieres PC)
# - Extraire les 3 premieres composantes principales
covariables <- pca_results$x[, 1:3]  # Les 3 premieres composantes principales

# 6.3 Incorporation des covariables dans l'analyse GWAS
# - rMVP permet d'incorporer des covariables a l'aide de l'argument "CV.GLM", "CV.MLM" et "CV.FarmCPU"
# - Exemple d'incorporation des covariables lors de l'analyse

imMVP <- MVP(
  phe = phenotype[, c(1, 2)],  # Exemple de phenotype
  geno = genotype,  # Matrice de genotype
  map = map,  # Carte genetique
  CV.GLM = covariables,  # Covariables dans GLM
  CV.MLM = covariables,  # Covariables dans MLM
  CV.FarmCPU = covariables,  # Covariables dans FarmCPU
  method = c("GLM", "MLM", "FarmCPU")  # Methodes d'analyse
)

###############################################
# FIN DU SCRIPT                             #
###############################################
